'From Squeak5.2 of 13 December 2018 [latest update: #18225] on 28 May 2021 at 6:31:43 pm'!ProtocolClient subclass: #TelnetProtocolClient	instanceVariableNames: 'responseCode'	classVariableNames: ''	poolDictionaries: ''	category: 'Network-Protocols'!!TelnetProtocolClient commentStamp: 'mir 5/12/2003 18:06' prior: 0!Abstract super class for protocol clients based on the generic telnet protocol "<response code> <response>"Structure:	responseCode	the numerical (integer) value of the last response code!!TelnetProtocolClient methodsFor: 'accessing' stamp: 'mir 2/22/2002 17:33'!responseCode	^responseCode! !!TelnetProtocolClient methodsFor: 'private' stamp: 'mir 2/22/2002 17:34'!determineResponseCode	self lastResponse size >= 3		ifFalse: [^0].	^[SmallInteger readFromString: (self lastResponse copyFrom: 1 to: 3)]		on: Error		do: [:ex | ex return: 0]! !!TelnetProtocolClient methodsFor: 'private' stamp: 'mir 11/14/2002 18:27'!lastResponse: aString	super lastResponse: aString.	responseCode := self determineResponseCode! !!TelnetProtocolClient methodsFor: 'private' stamp: 'pre 5/8/2017 14:15'!valueOfResponseLine: aString	^ aString allButFirst: 4 ! !!TelnetProtocolClient methodsFor: 'private protocol' stamp: 'pre 5/8/2017 13:43'!fetchNextResponse	"The FTP and similar protocols allow multi-line responses.	If the response is multi-line, the fourth character of the first line is a  	$- and the last line repeats the numeric code but the code is followed by 	a space."	| response result firstLine |	result := '' writeStream.	firstLine := self stream nextLine.	result nextPutAll: firstLine.	(self responseIsContinuation: firstLine) ifTrue: 		["continued over multiple lines. Discard continuation lines."			[response := self stream nextLine.			response ifNil: [^nil].			self response: response indicatesEndOf: firstLine.] 					whileFalse: [result cr; nextPutAll: response].			result cr; nextPutAll: response].	self lastResponse: result contents! !!TelnetProtocolClient methodsFor: 'private protocol' stamp: 'mir 4/7/2003 15:46'!lookForCode: code	"We are expecting a certain code next."	self		lookForCode: code		ifDifferent: [:response | (TelnetProtocolError protocolInstance: self) signal: response]! !!TelnetProtocolClient methodsFor: 'private protocol' stamp: 'mir 11/14/2002 16:21'!lookForCode: code ifDifferent: handleBlock	"We are expecting a certain code next."	self fetchNextResponse.	self responseCode == code		ifFalse: [handleBlock value: self lastResponse]! !!TelnetProtocolClient methodsFor: 'private testing' stamp: 'pre 5/8/2017 13:42'!response: response indicatesEndOf: aLine	^ response size > 3 		and: [(response copyFrom: 1 to: 3) = (aLine copyFrom: 1 to: 3) 		and: [(response at: 4) = Character space]]! !!TelnetProtocolClient methodsFor: 'private testing' stamp: 'pre 5/8/2017 14:13'!responseIsContinuation: response	^ response size > 3 and: [(response at: 4) == $-]! !!TelnetProtocolClient methodsFor: 'private testing' stamp: 'mir 2/22/2002 17:35'!responseIsError	^self responseCode between: 500 and: 599! !!TelnetProtocolClient methodsFor: 'private testing' stamp: 'pre 5/8/2017 14:50'!responseIsSuccess	^self responseCode between: 200 and: 299! !!TelnetProtocolClient methodsFor: 'private testing' stamp: 'mir 2/22/2002 17:35'!responseIsWarning	^self responseCode between: 400 and: 499! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!TelnetProtocolClient class	instanceVariableNames: ''!!TelnetProtocolClient class methodsFor: 'accessing' stamp: 'mir 2/21/2002 17:21'!rawResponseCodes	self subclassResponsibility! !