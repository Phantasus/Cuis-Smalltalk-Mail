'From Squeak5.2 of 13 December 2018 [latest update: #18225] on 28 May 2021 at 4:46:47 pm'!ProtocolClient subclass: #POP3Client	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'Network-Protocols'!!POP3Client commentStamp: 'mir 5/12/2003 17:57' prior: 0!This class implements POP3 (Post Office Protocol 3) as specified in RFC 1939.  (see http://www.ietf.org/rfc.html)You can use it to download email from the mail server to your personal mail program.To see an example of it's use, see POPSocket class>>example.!!POP3Client methodsFor: 'public protocol' stamp: 'mir 3/7/2002 14:58'!apopLoginUser: userName password: password	self loginUser: userName password: password loginMethod: #APOP! !!POP3Client methodsFor: 'public protocol' stamp: 'mir 3/7/2002 14:35'!deleteMessage: num	"delete the numbered message"	self ensureConnection.	self sendCommand: 'DELE ', num printString.	self checkResponse.	self logProgress: self lastResponse! !!POP3Client methodsFor: 'public protocol' stamp: 'mir 3/7/2002 14:57'!loginUser: userName password: password	self loginUser: userName password: password loginMethod: #clearText! !!POP3Client methodsFor: 'public protocol' stamp: 'mir 3/8/2002 11:40'!loginUser: userName password: password loginMethod: aLoginMethod	self user: userName.	self password: password.	self loginMethod: aLoginMethod.	self login! !!POP3Client methodsFor: 'public protocol' stamp: 'nice 12/27/2009 04:19'!messageCount	"Query the server and answer the number of messages that are in the user's mailbox."	| numMessages |	self ensureConnection.	self sendCommand: 'STAT'.	self checkResponse.	self logProgress: self lastResponse.	[ | answerString |	answerString := (self lastResponse findTokens: Character separators) second.	numMessages := answerString asNumber asInteger]		on: Error		do: [:ex | (ProtocolClientError protocolInstance: self) signal: 'Invalid STAT response.'].	^numMessages! !!POP3Client methodsFor: 'public protocol' stamp: 'len 12/14/2002 17:50'!quit	"QUIT <CRLF>"	self sendCommand: 'QUIT'.	self checkResponse.! !!POP3Client methodsFor: 'public protocol' stamp: 'mir 3/7/2002 14:35'!retrieveMessage: number	"retrieve the numbered message"	self ensureConnection.	self sendCommand: 'RETR ', number printString.	self checkResponse.	self logProgress: self lastResponse.	^self getMultilineResponse! !!POP3Client methodsFor: 'private' stamp: 'mir 11/11/2002 16:20'!loginMethod	^self connectionInfo at: #loginMethod ifAbsent: [nil]! !!POP3Client methodsFor: 'private' stamp: 'mir 3/8/2002 11:41'!loginMethod: aSymbol	^self connectionInfo at: #loginMethod put: aSymbol! !!POP3Client methodsFor: 'private' stamp: 'pre 5/8/2017 14:46'!starttlsVerb	^ #STLS! !!POP3Client methodsFor: 'private' stamp: 'pre 5/8/2017 14:45'!wantsStarttls	^ true! !!POP3Client methodsFor: 'private protocol' stamp: 'nice 12/27/2009 03:11'!apopLogin	"Attempt to authenticate ourselves to the server without sending the password as cleartext."	"For secure authentication, we look for a timestamp in the initial response string we get from the server, and then try the APOP command as specified in RFC 1939.  If the initial response from the server is	+OK POP3 server ready <1896.697170952@dbc.mtview.ca.us>we extract the timestamp	<1896.697170952@dbc.mtview.ca.us>then form a string of the form	<1896.697170952@dbc.mtview.ca.us>USERPASSWORDand then send only the MD5 hash of that to the server.  Thus the password never hits the wire"		[ | timestamp hash |	"Look for a timestamp in the response we received from the server"	timestamp := self lastResponse findTokens: '<>' includes: '@'.	timestamp		ifNil: [(POP3LoginError protocolInstance: self) signal: 'APOP not supported.'].	(Smalltalk includesKey: #MD5)		ifTrue: [			hash := ((Smalltalk at: #MD5) hashMessage: ('<', timestamp, '>', self password)) storeStringHex asLowercase.			"trim starting 16r and zero pad it to 32 characters if needed"			hash := hash  padded: #left to: 32 with: $0]		ifFalse: [(POP3LoginError protocolInstance: self) signal: 'APOP (MD5) not supported.'].	self sendCommand: 'APOP ', self user, ' ', hash.	self checkResponse.	self logProgress: self lastResponse]		on: ProtocolClientError		do: [:ex |			self close.			(LoginFailedException protocolInstance: self) signal: 'Login failed.']! !!POP3Client methodsFor: 'private protocol' stamp: 'mir 4/7/2003 17:38'!clearTextLogin	[self sendCommand: 'USER ', self user.	self checkResponse.	self logProgress: self lastResponse.	self sendCommand: 'PASS ', self password.	self checkResponse.	self logProgress: self lastResponse]		on: TelnetProtocolError		do: [:ex |			"Neither authentication worked.  Indicate an error and close up"			self close.			ex resignalAs: ((LoginFailedException protocolInstance: self) signal: 'Login failed.')]! !!POP3Client methodsFor: 'private protocol' stamp: 'mir 11/14/2002 17:40'!getMultilineResponse	"Get a multiple line response to the last command, filtering out LF characters. A multiple line response ends with a line containing only a single period (.) character."	| response done chunk |	response := WriteStream on: ''.	done := false.	[done] whileFalse: [		chunk := self stream nextLine.		(chunk beginsWith: '.')			ifTrue: [response nextPutAll: (chunk copyFrom: 2 to: chunk size); cr ]			ifFalse: [response nextPutAll: chunk; cr ].		done := (chunk = '.') ].	^ response contents! !!POP3Client methodsFor: 'private protocol' stamp: 'pre 5/11/2017 16:49'!initiateSession	self sendCommand: 'CAPA'.	self checkResponse.		self parseCapabilities: self getMultilineResponse lines.		(self tlsIsActive not and: [self serverSupportsStarttls] and: [self wantsStarttls])		ifTrue: [self starttls]! !!POP3Client methodsFor: 'private protocol' stamp: 'pre 5/8/2017 14:39'!login	self initiateSession.	self loginMethod		ifNil: [^self].	self loginMethod == #clearText		ifTrue: [^self clearTextLogin].	self loginMethod == #APOP		ifTrue: [^self apopLogin].	(POP3LoginError protocolInstance: self) signal: 'Unsupported login procedure.'! !!POP3Client methodsFor: 'private testing' stamp: 'mir 3/7/2002 13:43'!responseIsError	^self lastResponse beginsWith: '-'! !!POP3Client methodsFor: 'private testing' stamp: 'pre 5/8/2017 14:50'!responseIsSuccess	^self lastResponse beginsWith: '+'! !!POP3Client methodsFor: 'private testing' stamp: 'mir 11/11/2002 15:44'!responseIsWarning	^self lastResponse beginsWith: '-'! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!POP3Client class	instanceVariableNames: ''!!POP3Client class methodsFor: 'accessing' stamp: 'mir 3/7/2002 12:51'!defaultPortNumber	^110! !!POP3Client class methodsFor: 'accessing' stamp: 'mir 3/7/2002 12:52'!logFlag	^#pop! !!POP3Client class methodsFor: 'example' stamp: 'rbb 3/1/2005 11:05'!example	"POP3Client example"	"download a user's messages into an OrderedCollection and inspect the OrderedCollection"	| ps messages userName password |	userName := (UIManager default request: 'POP username').	password := (UIManager default request: 'POP password').	ps := POP3Client openOnHostNamed: (UIManager default request: 'POP server').	[	ps loginUser: userName password: password.	ps logProgressToTranscript.	messages := OrderedCollection new.	1 to: ps messageCount do: [ :messageNr |		messages add: (ps retrieveMessage: messageNr) ]]		ensure: [ps close].	messages inspect.! !